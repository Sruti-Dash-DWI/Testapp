import React, { useState, useEffect, useMemo, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ChevronLeft, ChevronRight, Search, Calendar as CalendarIcon, MoreHorizontal, Plus, ChevronDown, X, AlertCircle, Grid } from 'lucide-react';

import { ItemDetailModal, EditSprintModal } from "../Dashboardpages/backlog/BacklogModals";

// --- START OF UNCHANGED CODE ---

const taskTypes = [
Â  Â  { name: 'Task', icon: 'âœ“' },
Â  Â  { name: 'Epic', icon: 'âœ¨' },
Â  Â  { name: 'Subtask', icon: 'ðŸ”—' }
];

const statusOptions = [
Â  Â  { id: 1, title: 'To Do' },
Â  Â  { id: 2, title: 'In Progress' },
Â  Â  { id: 3, title: 'In Review' },
Â  Â  { id: 4, title: 'Done' },
Â  Â  { id: 5, title: 'Testing' },
];

const priorityOptions = ['HIGH','HIGHEST', 'MEDIUM', 'LOW', 'LOWEST'];


export default function CalendarUI() {
Â  Â  const { projectId } = useParams();
Â  Â  const navigate = useNavigate();

Â  Â  // --- STATE MANAGEMENT ---
Â  Â  const [currentDate, setCurrentDate] = useState(new Date());
Â  Â  const [tasks, setTasks] = useState([]);
Â  Â  const [projectMembers, setProjectMembers] = useState([]);
Â  Â  const [isLoading, setIsLoading] = useState(true);
Â  Â  const [error, setError] = useState(null);
Â  Â  const [showTaskModal, setShowTaskModal] = useState(false);
Â  Â  const [taskInput, setTaskInput] = useState('');
Â  Â  const [selectedDate, setSelectedDate] = useState(null);
Â  Â  const [modalSelectedDate, setModalSelectedDate] = useState(null);
Â  Â  const [showTaskTypeMenu, setShowTaskTypeMenu] = useState(false);
Â  Â  const [selectedTaskType, setSelectedTaskType] = useState('Task');
Â  Â  const [selectedParentTaskId, setSelectedParentTaskId] = useState('');
Â  Â  const [searchTerm, setSearchTerm] = useState('');
Â  Â  const [showAssigneeDropdown, setShowAssigneeDropdown] = useState(false);
Â  Â  const [showTypeDropdown, setShowTypeDropdown] = useState(false);
Â  Â  const [showStatusDropdown, setShowStatusDropdown] = useState(false);
Â  Â  const [showMoreFiltersDropdown, setShowMoreFiltersDropdown] = useState(false);
Â  Â  const [selectedAssignees, setSelectedAssignees] = useState([]);
Â  Â  const [selectedTypes, setSelectedTypes] = useState([]);
Â  Â  const [selectedStatuses, setSelectedStatuses] = useState([]);
Â  Â  const [selectedPriorities, setSelectedPriorities] = useState([]);
Â  Â  const [sprints, setSprints] = useState([]);
Â  Â  const [epics, setEpics] = useState([]);
Â  Â  const [sprintToEdit, setSprintToEdit] = useState(null);
Â  Â  const [selectedItemId, setSelectedItemId] = useState(null);
Â  Â  const selectedItem = useMemo(() => tasks.find(t => t.id === selectedItemId) || null, [tasks, selectedItemId]);
Â  Â  const [popover, setPopover] = useState({ type: null, data: null, style: {} });
Â  Â  const popoverRef = useRef(null);

Â  Â  // --- MEMOIZED VALUES ---
Â  Â  const usersWithUnassigned = useMemo(() => [{ id: null, name: "Unassigned" }, ...projectMembers.map(m => ({ id: m.user.id, name: `${m.user.first_name || ''} ${m.user.last_name || ''}`.trim() || m.user.email }))], [projectMembers]);
Â  Â  
Â  Â  const uniqueTaskTypes = useMemo(() => {
Â  Â  Â  Â  const types = new Set();
Â  Â  Â  Â  tasks.forEach(task => {
Â  Â  Â  Â  Â  Â  if (task.task_type) types.add(task.task_type);
Â  Â  Â  Â  });
Â  Â  Â  Â  return Array.from(types);
Â  Â  }, [tasks]);

Â  Â  const filteredTasks = useMemo(() => {
Â  Â  Â  Â  return tasks.filter(task => {
Â  Â  Â  Â  Â  Â  const searchMatch = searchTerm === '' || task.title.toLowerCase().includes(searchTerm.toLowerCase());
Â  Â  Â  Â  Â  Â  const assigneeMatch = selectedAssignees.length === 0 || 
Â  Â  Â  Â  Â  Â  Â  Â  (selectedAssignees.includes('unassigned') && task.assignees.length === 0) ||
Â  Â  Â  Â  Â  Â  Â  Â  task.assignees.some(a => selectedAssignees.includes(a.user.id));
Â  Â  Â  Â  Â  Â  const typeMatch = selectedTypes.length === 0 || selectedTypes.includes(task.task_type);
Â  Â  Â  Â  Â  Â  const statusMatch = selectedStatuses.length === 0 || selectedStatuses.includes(task.status?.id);
Â  Â  Â  Â  Â  Â  const priorityMatch = selectedPriorities.length === 0 || selectedPriorities.includes(task.priority?.toUpperCase());
Â  Â  Â  Â  Â  Â  return searchMatch && assigneeMatch && typeMatch && statusMatch && priorityMatch;
Â  Â  Â  Â  });
Â  Â  }, [tasks, searchTerm, selectedAssignees, selectedTypes, selectedStatuses, selectedPriorities]);

Â  Â  // --- DATA FETCHING ---
Â  Â  useEffect(() => {
Â  Â  Â  Â  const fetchAllData = async () => {
Â  Â  Â  Â  Â  Â  if (!projectId) {
Â  Â  Â  Â  Â  Â  Â  Â  setError("Project ID is missing.");
Â  Â  Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  Â  Â  Â  Â  if (!authToken) {
Â  Â  Â  Â  Â  Â  Â  Â  navigate("/login");
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  const projectUrl = `http://127.0.0.1:8000/api/projects/${projectId}/`;
Â  Â  Â  Â  Â  Â  Â  Â  const sprintUrl = `http://127.0.0.1:8000/api/sprints/dashboard/?project=${projectId}`;

Â  Â  Â  Â  Â  Â  Â  Â  const [projectResponse, sprintResponse] = await Promise.all([
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fetch(projectUrl, { headers: { Authorization: `Bearer ${authToken}` } }),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fetch(sprintUrl, { headers: { Authorization: `Bearer ${authToken}` } })
Â  Â  Â  Â  Â  Â  Â  Â  ]);

Â  Â  Â  Â  Â  Â  Â  Â  if (!projectResponse.ok || !sprintResponse.ok) throw new Error("Failed to fetch all project data.");
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  const projectData = await projectResponse.json();
Â  Â  Â  Â  Â  Â  Â  Â  const sprintData = await sprintResponse.json();

Â  Â  Â  Â  Â  Â  Â  Â  setTasks(projectData.tasks || []);
Â  Â  Â  Â  Â  Â  Â  Â  setProjectMembers(projectData.members || []);
Â  Â  Â  Â  Â  Â  Â  Â  setEpics(projectData.epics || []);
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  const allSprints = [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...(sprintData.active_sprints || []),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...(sprintData.upcoming_sprints || []),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...(sprintData.completed_sprints || [])
Â  Â  Â  Â  Â  Â  Â  Â  ];
Â  Â  Â  Â  Â  Â  Â  Â  setSprints(allSprints);

Â  Â  Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  Â  Â  setError(err.message);
Â  Â  Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };
Â  Â  Â  Â  fetchAllData();
Â  Â  }, [projectId, navigate]);
Â  Â  
Â  Â  // --- API HANDLERS ---
Â  Â  const handleUpdateItemDB = async (itemId, updates) => {
Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  const projectIdInt = parseInt(projectId, 10);
Â  Â  const updateKey = Object.keys(updates)[0];
Â  Â  if (!updateKey) return;

Â  Â  let fullUrl = `http://127.0.0.1:8000/api/tasks/${itemId}/`;
Â  Â  let payload = {};

Â  Â  switch (updateKey) {
Â  Â  Â  Â  case "assignee":
Â  Â  Â  Â  Â  Â  fullUrl += "assignees/";
Â  Â  Â  Â  Â  Â  payload = { assignees: updates.assignee ? [updates.assignee] : [], project: projectIdInt };
Â  Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  case "sprint":
Â  Â  Â  Â  Â  Â  fullUrl += 'sprint/';
Â  Â  Â  Â  Â  Â  payload = { sprint: updates.sprint };
Â  Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  default:
Â  Â  Â  Â  Â  Â  payload = { ...updates };
Â  Â  Â  Â  Â  Â  if (payload.priority) payload.priority = payload.priority.toUpperCase();
Â  Â  Â  Â  Â  Â  break;
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  const response = await fetch(fullUrl, {
Â  Â  Â  Â  Â  Â  method: "PATCH",
Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â  body: JSON.stringify(payload),
Â  Â  Â  Â  });
Â  Â  Â  Â  
Â  Â  Â  Â  let responseData = await response.json();
Â  Â  Â  Â  if (!response.ok) throw new Error(JSON.stringify(responseData));
Â  Â  Â  Â  
Â  Â  Â  Â  if (responseData.assignees) {
Â  Â  Â  Â  Â  Â  responseData.assignee = responseData.assignees.length > 0
Â  Â  Â  Â  Â  Â  Â  Â  ? responseData.assignees[0].user.id
Â  Â  Â  Â  Â  Â  Â  Â  : null;
Â  Â  Â  Â  }

Â  Â  Â  Â  setTasks(prev => prev.map(t => t.id === itemId ? { ...t, ...responseData } : t));
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error(`Failed to update item ${itemId}:`, error.message);
Â  Â  Â  Â  setError("Failed to update the task.");
Â  Â  }
};
Â  Â  
Â  Â  const handleToggleTaskStatus = async (taskId) => {
Â  Â  Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  Â  Â  const task = tasks.find(t => t.id === taskId);
Â  Â  Â  Â  if (!task) return;

Â  Â  Â  Â  const newStatusId = task.status?.id === 4 ? 1 : 4; 
Â  Â  Â  Â  
Â  Â  Â  Â  const originalTasks = tasks;
Â  Â  Â  Â  setTasks(prev => prev.map(t => t.id === taskId ? { ...t, status: statusOptions.find(s => s.id === newStatusId) } : t));

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await fetch(`http://127.0.0.1:8000/api/tasks/${taskId}/status/`, {
Â  Â  Â  Â  Â  Â  Â  Â  method: "PATCH",
Â  Â  Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â  Â  Â  body: JSON.stringify({ status: newStatusId, project: parseInt(projectId, 10) }),
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  if (!response.ok) throw new Error("Failed to update task status.");
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const updatedTask = await response.json();
Â  Â  Â  Â  Â  Â  setTasks(prev => prev.map(t => t.id === taskId ? { ...t, ...updatedTask } : t));
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Error toggling task status:", error);
Â  Â  Â  Â  Â  Â  setError("Could not update task status.");
Â  Â  Â  Â  Â  Â  setTasks(originalTasks);
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  const handleDeleteSprint = async (sprintId) => {
Â  Â  Â  Â  if (!window.confirm("Are you sure you want to delete this sprint? This action cannot be undone.")) return;
Â  Â  Â  Â  
Â  Â  Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await fetch(`http://127.0.0.1:8000/api/sprints/${sprintId}/`, {
Â  Â  Â  Â  Â  Â  Â  Â  method: "DELETE",
Â  Â  Â  Â  Â  Â  Â  Â  headers: { Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  if (!response.ok) throw new Error("Failed to delete sprint.");

Â  Â  Â  Â  Â  Â  setSprints(prev => prev.filter(s => s.id !== sprintId));
Â  Â  Â  Â  Â  Â  setPopover({ type: null });
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Error deleting sprint:", error);
Â  Â  Â  Â  Â  Â  setError("Could not delete the sprint.");
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const handleUpdateSprint = async (sprintId, updates) => {
Â  Â  Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await fetch(`http://127.0.0.1:8000/api/sprints/${sprintId}/`, {
Â  Â  Â  Â  Â  Â  Â  Â  method: "PATCH",
Â  Â  Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â  Â  Â  body: JSON.stringify(updates),
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  if (!response.ok) throw new Error("Failed to update sprint.");
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const updatedSprint = await response.json();
Â  Â  Â  Â  Â  Â  setSprints(prev => prev.map(s => s.id === sprintId ? { ...s, ...updatedSprint } : s));
Â  Â  Â  Â  Â  Â  setSprintToEdit(null);
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Error updating sprint:", error);
Â  Â  Â  Â  Â  Â  setError("Could not update the sprint.");
Â  Â  Â  Â  }
Â  Â  };

Â  Â  

const handleFetchComments = async (taskId) => {
Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  try {
Â  Â  Â  Â  const response = await fetch(`http://127.0.0.1:8000/api/tasks/${taskId}/activities/`, {
Â  Â  Â  Â  Â  Â  headers: { Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  });
Â  Â  Â  Â  if (!response.ok) throw new Error("Failed to fetch comments.");
Â  Â  Â  Â  const activities = await response.json();

Â  Â  Â  Â  setTasks(prev => prev.map(t => t.id === taskId ? { ...t, activity_log: activities } : t));
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error fetching comments:", error);
Â  Â  }
};

const handleAddComment = async (taskId, commentBody) => {
Â  Â  if (!commentBody.trim()) return;
Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  try {
Â  Â  Â  Â  const response = await fetch(`http://127.0.0.1:8000/api/tasks/${taskId}/add-activity/`, {
Â  Â  Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â  body: JSON.stringify({ comment_body: commentBody }),
Â  Â  Â  Â  });
Â  Â  Â  Â  if (!response.ok) throw new Error("Failed to post comment.");
Â  Â  Â  Â  const newActivity = await response.json();

Â  Â  Â  Â  setTasks(prev => prev.map(t => {
Â  Â  Â  Â  Â  Â  if (t.id === taskId) {
Â  Â  Â  Â  Â  Â  Â  Â  return { ...t, activity_log: [...(t.activity_log || []), newActivity] };
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return t;
Â  Â  Â  Â  }));
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error adding comment:", error);
Â  Â  Â  Â  setError("Could not post your comment.");
Â  Â  }
};

const handleUpdateComment = async (taskId, activityId, commentBody) => {
Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  try {
Â  Â  Â  Â  const response = await fetch(`http://127.0.0.1:8000/api/tasks/${taskId}/update-activity/${activityId}/`, {
Â  Â  Â  Â  Â  Â  method: "PUT",
Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â  body: JSON.stringify({ comment_body: commentBody }),
Â  Â  Â  Â  });
Â  Â  Â  Â  if (!response.ok) throw new Error("Failed to update comment.");
Â  Â  Â  Â  const updatedActivity = await response.json();

Â  Â  Â  Â  const updateLogs = (logs) => (logs || []).map(act => act.id === activityId ? updatedActivity : act);
Â  Â  Â  Â  setTasks(prev => prev.map(t => t.id === taskId ? { ...t, activity_log: updateLogs(t.activity_log) } : t));
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error updating comment:", error);
Â  Â  Â  Â  setError("Could not update your comment.");
Â  Â  }
};

const handleDeleteComment = async (taskId, activityId) => {
Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  try {
Â  Â  Â  Â  const response = await fetch(`http://127.0.0.1:8000/api/tasks/${taskId}/delete-activity/${activityId}/`, {
Â  Â  Â  Â  Â  Â  method: "DELETE",
Â  Â  Â  Â  Â  Â  headers: { Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  });
Â  Â  Â  Â  if (!response.ok) throw new Error("Failed to delete comment.");

Â  Â  Â  Â  const updateLogs = (logs) => (logs || []).filter(act => act.id !== activityId);
Â  Â  Â  Â  setTasks(prev => prev.map(t => t.id === taskId ? { ...t, activity_log: updateLogs(t.activity_log) } : t));
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error deleting comment:", error);
Â  Â  Â  Â  setError("Could not delete your comment.");
Â  Â  }
};

Â  Â  const formatDateForAPI = (date) => {
Â  Â  Â  Â  if (!date) return null;
Â  Â  Â  Â  // If date is already a string in 'YYYY-MM-DD' format, return it
Â  Â  Â  Â  if (typeof date === 'string') {
Â  Â  Â  Â  Â  Â  return date.split('T')[0];
Â  Â  Â  Â  }
Â  Â  Â  Â  const year = date.getFullYear();
Â  Â  Â  Â  const month = (date.getMonth() + 1).toString().padStart(2, '0');
Â  Â  Â  Â  const day = date.getDate().toString().padStart(2, '0');
Â  Â  Â  Â  return `${year}-${month}-${day}`;
Â  Â  };

Â  Â  const handleCreateTask = async () => {
Â  Â  Â  Â  if (!taskInput.trim()) return;
Â  Â  Â  Â  if (selectedTaskType !== 'Epic' && !modalSelectedDate) {
Â  Â  Â  Â  Â  Â  alert("Please select a due date for the item.");
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  if (selectedTaskType === 'Subtask' && !selectedParentTaskId) {
Â  Â  Â  Â  Â  Â  alert("Please select a parent task for the subtask.");
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  Â  Â  const currentUserId = parseInt(localStorage.getItem("userId"), 10);
Â  Â  Â  Â  const currentUserMembership = projectMembers.find(m => m.user.id === currentUserId);
Â  Â  Â  Â  
Â  Â  Â  Â  if (!currentUserMembership) {
Â  Â  Â  Â  Â  Â  setError("You are not a member of this project and cannot create items.");
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  if (selectedTaskType === 'Epic') {
Â  Â  Â  Â  Â  Â  Â  Â  const payload = { title: taskInput, project: parseInt(projectId, 10) };
Â  Â  Â  Â  Â  Â  Â  Â  const response = await fetch(`http://127.0.0.1:8000/api/epics/`, {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  body: JSON.stringify(payload),
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  if (!response.ok) throw new Error("Failed to create epic.");
Â  Â  Â  Â  Â  Â  Â  Â  console.log("Epic created successfully!");

Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  const taskPayload = {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title: taskInput,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  project: parseInt(projectId, 10),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  reporter: currentUserMembership.id,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  due_date: formatDateForAPI(modalSelectedDate),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  status_id: 1, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  priority: "MEDIUM",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  task_type: 'FEATURE',
Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  const taskResponse = await fetch(`http://127.0.0.1:8000/api/tasks/`, {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â    Â  Â  Â  body: JSON.stringify(taskPayload),
Â  Â  Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  Â  Â  const createdTask = await taskResponse.json();
Â  Â  Â  Â  Â  Â  Â  Â  if (!taskResponse.ok) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new Error(JSON.stringify(createdTask) || "Failed to create task.");
Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  let finalTask = createdTask;

Â  Â  Â  Â  Â  Â  Â  Â  if (selectedTaskType === 'Subtask') {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const linkPayload = { parent_task: parseInt(selectedParentTaskId, 10) };
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const linkResponse = await fetch(`http://127.0.0.1:8000/api/tasks/${createdTask.id}/parent/`, {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  method: "PATCH",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  body: JSON.stringify(linkPayload),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (!linkResponse.ok) throw new Error("Task created, but failed to link to parent.");
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  finalTask = await linkResponse.json(); 
Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  setTasks(prev => [...prev, finalTask]);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  setShowTaskModal(false);
Â  Â  Â  Â  Â  Â  setTaskInput('');
Â  Â  Â  Â  Â  Â  setModalSelectedDate(null);
Â  Â  Â  Â  Â  Â  setSelectedTaskType('Task');
Â  Â  Â  Â  Â  Â  setSelectedParentTaskId('');
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Error creating item:", error);
Â  Â  Â  Â  Â  Â  setError(error.message);
Â  Â  Â  Â  }
Â  Â  };

Â  Â 

const handleCreateSubtask = async (parentItemId, subtaskTitle) => {
Â  Â  if (!subtaskTitle.trim() || !parentItemId) return;

Â  Â  const authToken = localStorage.getItem("authToken");
Â  Â  const currentUserId = parseInt(localStorage.getItem("userId"), 10);
Â  Â  const currentUserMembership = projectMembers.find(m => m.user.id === currentUserId);
Â  Â  
Â  Â  if (!currentUserMembership) {
Â  Â  Â  Â  setError("You are not a member of this project and cannot create subtasks.");
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  try {
Â  Â  Â  Â  const taskPayload = {
Â  Â  Â  Â  Â  Â  title: subtaskTitle,
Â  Â  Â  Â  Â  Â  project: parseInt(projectId, 10),
Â  Â  Â  Â  Â  Â  reporter: currentUserMembership.id,
Â  Â  Â  Â  Â  Â  due_date: formatDateForAPI(tasks.find(t => t.id === parentItemId)?.due_date) || formatDateForAPI(new Date()),
Â  Â  Â  Â  Â  Â  status_id: 1, 
Â  Â  Â  Â  Â  Â  priority: "MEDIUM",
Â  Â  Â  Â  Â  Â  task_type: 'FEATURE',
Â  Â  Â  Â  };
Â  Â  Â  Â  
Â  Â  Â  Â  const taskResponse = await fetch(`http://127.0.0.1:8000/api/tasks/`, {
Â  Â  Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â  body: JSON.stringify(taskPayload),
Â  Â  Â  Â  });

Â  Â  Â  Â  const createdTask = await taskResponse.json();
Â  Â  Â  Â  if (!taskResponse.ok) {
Â  Â  Â  Â  Â  Â  throw new Error(JSON.stringify(createdTask) || "Failed to create subtask.");
Â  Â  Â  Â  }

Â  Â  Â  Â  const linkPayload = { parent_task: parentItemId };
Â  Â  Â  Â  const linkResponse = await fetch(`http://127.0.0.1:8000/api/tasks/${createdTask.id}/parent/`, {
Â  Â  Â  Â  Â  Â  method: "PATCH",
Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authToken}` },
Â  Â  Â  Â  Â  Â  body: JSON.stringify(linkPayload),
Â  Â  Â  Â  });
Â  Â  Â  Â  if (!linkResponse.ok) throw new Error("Task created, but failed to link to parent.");

Â  Â  Â  Â  const newSubtask = { ...createdTask, parent: parentItemId };

Â  Â  Â  Â  setTasks(prevTasks => {
Â  Â  Â  Â  Â  Â  const tasksWithUpdatedParent = prevTasks.map(task => {
Â  Â  Â  Â  Â  Â  Â  Â  if (task.id === parentItemId) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return { ...task, subtasks: [...(task.subtasks || []), newSubtask] };
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  return task;
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  return [...tasksWithUpdatedParent, newSubtask];
Â  Â  Â  Â  });
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error creating subtask:", error);
Â  Â  Â  Â  setError(error.message);
Â  Â  }
};
Â  Â  
// --- HELPER FUNCTIONS ---
Â  Â  const getItemsForDate = (date) => {
Â  Â  Â  Â  const localDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());

Â  Â  Â  Â  const tasksOnDate = filteredTasks
Â  Â  Â  Â  Â  Â  .filter(task => {
Â  Â  Â  Â  Â  Â  Â  Â  if (!task.due_date) return false;
Â  Â  Â  Â  Â  Â  Â  Â  const taskDate = new Date(task.due_date + 'T00:00:00');
Â  Â  Â  Â  Â  Â  Â  Â  return taskDate.getTime() === localDate.getTime();
Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  .map(task => ({ ...task, itemType: 'task' }));

Â  Â  Â  Â  let sprintsOnDate = [];
Â  Â  Â  Â  const isAnyFilterActive = selectedAssignees.length > 0 || selectedTypes.length > 0 || selectedStatuses.length > 0 || selectedPriorities.length > 0;
Â  Â  Â  Â  
Â  Â  Â  Â  if (!isAnyFilterActive) {
Â  Â  Â  Â  Â  Â  sprintsOnDate = sprints
Â  Â  Â  Â  Â  Â  Â  Â  .filter(sprint => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const startDate = new Date(sprint.start_date + 'T00:00:00');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const endDate = new Date(sprint.end_date + 'T00:00:00');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const isWithinDate = localDate >= startDate && localDate <= endDate;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const searchMatch = searchTerm === '' || sprint.name.toLowerCase().includes(searchTerm.toLowerCase());
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return isWithinDate && searchMatch;
Â  Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  Â  Â  .map(sprint => ({ ...sprint, itemType: 'sprint' }));
Â  Â  Â  Â  }

Â  Â  Â  Â  return [...sprintsOnDate, ...tasksOnDate];
Â  Â  };

Â  Â  const toggleFilter = (filterType, value) => {
Â  Â  Â  Â  const updater = (prev) => prev.includes(value) ? prev.filter(item => item !== value) : [...prev, value];
Â  Â  Â  Â  if (filterType === 'assignee') setSelectedAssignees(updater);
Â  Â  Â  Â  if (filterType === 'type') setSelectedTypes(updater);
Â  Â  Â  Â  if (filterType === 'status') setSelectedStatuses(updater);
Â  Â  Â  Â  if (filterType === 'priority') setSelectedPriorities(updater);
Â  Â  };
Â  Â  
Â  Â  const calculatePopoverPosition = (event) => {
Â  Â  Â  Â  const rect = event.currentTarget.getBoundingClientRect();
Â  Â  Â  Â  const popoverHeight = 250;
Â  Â  Â  Â  const popoverWidth = 250;
Â  Â  Â  Â  
Â  Â  Â  Â  let style = {};

Â  Â  Â  Â  if (rect.bottom + popoverHeight > window.innerHeight) {
Â  Â  Â  Â  Â  Â  style.bottom = `${window.innerHeight - rect.top}px`;
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  style.top = `${rect.bottom}px`;
Â  Â  Â  Â  }

Â  Â  Â  Â  if (rect.left + popoverWidth > window.innerWidth) {
Â  Â  Â  Â  Â  Â  style.right = `${window.innerWidth - rect.right}px`;
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  style.left = `${rect.left}px`;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  return style;
Â  Â  }

Â  Â  const handleItemClick = (item, event) => {
Â  Â  Â  Â  event.stopPropagation();
Â  Â  Â  Â  if (item.itemType === 'task') {
Â  Â  Â  Â  Â  Â  console.log("DATA FOR MODAL:", item); 
Â  Â  Â  Â  Â  Â  Â setSelectedItemId(item.id);
Â  Â  Â  Â  } else if (item.itemType === 'sprint') {
Â  Â  Â  Â  Â  Â  setPopover({
Â  Â  Â  Â  Â  Â  Â  Â  type: 'sprint',
Â  Â  Â  Â  Â  Â  Â  Â  data: item,
Â  Â  Â  Â  Â  Â  Â  Â  style: calculatePopoverPosition(event)
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  const handleMoreClick = (items, event) => {
Â  Â  Â  Â  event.stopPropagation();
Â  Â  Â  Â  setPopover({
Â  Â  Â  Â  Â  Â  type: 'more',
Â  Â  Â  Â  Â  Â  data: items,
Â  Â  Â  Â  Â  Â  style: calculatePopoverPosition(event)
Â  Â  Â  Â  });
Â  Â  };

Â  Â  useEffect(() => {
Â  Â  Â  Â  const handleClickOutside = (event) => {
Â  Â  Â  Â  Â  Â  if (popoverRef.current && !popoverRef.current.contains(event.target)) {
Â  Â  Â  Â  Â  Â  Â  Â  setPopover({ type: null });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };
Â  Â  Â  Â  const handleScroll = () => {
Â  Â  Â  Â  Â  Â  setPopover({ type: null });
Â  Â  Â  Â  };
Â  Â  Â  Â  document.addEventListener("mousedown", handleClickOutside);
Â  Â  Â  Â  document.addEventListener("scroll", handleScroll, true);
Â  Â  Â  Â  return () => {
Â  Â  Â  Â  Â  Â  document.removeEventListener("mousedown", handleClickOutside);
Â  Â  Â  Â  Â  Â  document.removeEventListener("scroll", handleScroll, true);
Â  Â  Â  Â  };
Â  Â  }, []);

Â  Â  const monthNames = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
Â  Â  const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
Â  Â  const getCalendarDays = () => {
Â  Â  Â  Â  const year = currentDate.getFullYear();
Â  Â  Â  Â  const month = currentDate.getMonth();
Â  Â  Â  Â  const firstDay = new Date(year, month, 1);
Â  Â  Â  Â  const startDate = new Date(firstDay);
Â  Â  Â  Â  startDate.setDate(startDate.getDate() - (firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1));
Â  Â  Â  Â  const days = [];
Â  Â  Â  Â  const currentDay = new Date(startDate);
Â  Â  Â  Â  for (let week = 0; week < 6; week++) {
Â  Â  Â  Â  Â  Â  const weekDaysArr = [];
Â  Â  Â  Â  Â  Â  for (let day = 0; day < 7; day++) {
Â  Â  Â  Â  Â  Â  Â  Â  weekDaysArr.push({ date: currentDay.getDate(), isCurrentMonth: currentDay.getMonth() === month, fullDate: new Date(currentDay) });
Â  Â  Â  Â  Â  Â  Â  Â  currentDay.setDate(currentDay.getDate() + 1);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  days.push(weekDaysArr);
Â  Â  Â  Â  }
Â  Â  Â  Â  return days;
Â  Â  };
Â  Â  const calendarDays = getCalendarDays();
Â  Â  const navigateMonth = (direction) => setCurrentDate(prev => {
Â  Â  Â  Â  const newDate = new Date(prev);
Â  Â  Â  Â  newDate.setMonth(prev.getMonth() + direction);
Â  Â  Â  Â  return newDate;
Â  Â  });
Â  Â  const goToToday = () => setCurrentDate(new Date());
Â  Â  const closeAllDropdowns = () => {
Â  Â  Â  Â  setShowTypeDropdown(false);
Â  Â  Â  Â  setShowStatusDropdown(false);
Â  Â  Â  Â  setShowAssigneeDropdown(false);
Â  Â  Â  Â  setShowMoreFiltersDropdown(false);
Â  Â  Â  Â  setShowTaskTypeMenu(false);
Â  Â  };
// --- END OF UNCHANGED CODE ---


Â  Â if (isLoading) {
return (
Â  Â  Â <div className="flex flex-col items-center justify-center h-screen bg-gray-50">
Â  Â  Â  Â <div className="w-12 h-12 border-4 border-gray-300 border-solid rounded-full border-t-blue-500 animate-spin"></div>
Â  Â  Â  Â <p className="mt-4 text-lg font-semibold text-gray-700">Loading...</p>
Â  Â  Â </div>
Â );
}
Â  Â  if (error) return <div className="flex items-center justify-center h-full text-red-500 p-10">Error: {error}</div>;
Â  Â  
Â  Â  // --- START OF STYLED RENDER ---
Â  Â  return (
Â  Â  Â  Â  <div className="bg-gray-50 min-h-screen p-4 sm:p-6 lg:p-8">
Â  Â  Â  Â  Â  Â  {(showTypeDropdown || showStatusDropdown || showAssigneeDropdown || showMoreFiltersDropdown) && (<div className="fixed inset-0 z-10" onClick={closeAllDropdowns} />)}

Â  Â  Â  Â  Â  Â  <div className="bg-white rounded-2xl shadow-lg p-6 w-full max-w-full mx-auto">
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-wrap items-center justify-between mb-6 gap-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Filters and Search */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-2 flex-wrap gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="text" placeholder="Search events" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-9 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent w-64 bg-white text-sm" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <button onClick={() => { closeAllDropdowns(); setShowAssigneeDropdown(!showAssigneeDropdown);}} className="flex items-center px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-700 hover:bg-gray-50 text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â All Assignees <ChevronDown className="ml-2 w-4 h-4 text-gray-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {showAssigneeDropdown && ( 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="absolute top-full left-0 mt-1 w-56 bg-white border border-gray-200 rounded-lg shadow-lg z-30 p-2 space-y-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <label className="flex items-center space-x-2 p-2 hover:bg-gray-50 rounded cursor-pointer">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <input type="checkbox" className="rounded text-blue-600 focus:ring-blue-500" checked={selectedAssignees.includes('unassigned')} onChange={() => toggleFilter('assignee', 'unassigned')} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span className="text-sm text-gray-700">Unassigned</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {projectMembers.map(member => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <label key={member.user.id} className="flex items-center space-x-2 p-2 hover:bg-gray-50 rounded cursor-pointer">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <input type="checkbox" className="rounded text-blue-600 focus:ring-blue-500" checked={selectedAssignees.includes(member.user.id)} onChange={() => toggleFilter('assignee', member.user.id)} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span className="text-sm text-gray-700">{member.user.first_name} {member.user.last_name}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <button onClick={() => { closeAllDropdowns(); setShowTypeDropdown(!showTypeDropdown); }} className="flex items-center px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-700 hover:bg-gray-50 text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â All Types <ChevronDown className="ml-2 w-4 h-4 text-gray-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {showTypeDropdown && ( 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="absolute top-full left-0 mt-1 w-56 bg-white border border-gray-200 rounded-lg shadow-lg z-30 p-2 space-y-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {uniqueTaskTypes.map(type => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <label key={type} className="flex items-center space-x-2 p-2 hover:bg-gray-50 rounded cursor-pointer">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <input type="checkbox" className="rounded text-blue-600 focus:ring-blue-500" checked={selectedTypes.includes(type)} onChange={() => toggleFilter('type', type)} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span className="text-sm text-gray-700">{type}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <button onClick={() => { closeAllDropdowns(); setShowStatusDropdown(!showStatusDropdown); }} className="flex items-center px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-700 hover:bg-gray-50 text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â All Status <ChevronDown className="ml-2 w-4 h-4 text-gray-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {showStatusDropdown && ( 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="absolute top-full left-0 mt-1 w-56 bg-white border border-gray-200 rounded-lg shadow-lg z-30 p-2 space-y-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {statusOptions.map(status => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <label key={status.id} className="flex items-center space-x-2 p-2 hover:bg-gray-50 rounded cursor-pointer">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <input type="checkbox" className="rounded text-blue-600 focus:ring-blue-500" checked={selectedStatuses.includes(status.id)} onChange={() => toggleFilter('status', status.id)} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span className="text-sm text-gray-700">{status.title}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <button onClick={() => { closeAllDropdowns(); setShowMoreFiltersDropdown(!showMoreFiltersDropdown); }} className="flex items-center px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-700 hover:bg-gray-50 text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â More filters <ChevronDown className="ml-2 w-4 h-4 text-gray-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {showMoreFiltersDropdown && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="absolute top-full left-0 mt-1 w-64 bg-white border border-gray-200 rounded-lg shadow-lg z-30 max-h-96 overflow-y-auto p-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <h4 className="text-xs font-bold text-gray-500 uppercase mb-2 px-2">Priority</h4>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className='space-y-1 mb-3'>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {priorityOptions.map((priority) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <label key={priority} className="flex items-center space-x-2 p-2 hover:bg-gray-50 rounded cursor-pointer">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <input type="checkbox" className="rounded w-4 h-4 text-blue-600 focus:ring-blue-500" checked={selectedPriorities.includes(priority)} onChange={() => toggleFilter('priority', priority)} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span className="text-sm text-gray-700">{priority.charAt(0) + priority.slice(1).toLowerCase()}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Calendar Controls */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={goToToday} className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-all duration-300 text-sm font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Today
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => navigateMonth(-1)} className="p-2 hover:bg-gray-100 rounded-full transition-all duration-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ChevronLeft className="w-5 h-5 text-gray-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-base font-semibold min-w-32 text-center text-gray-800">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => navigateMonth(1)} className="p-2 hover:bg-gray-100 rounded-full transition-all duration-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ChevronRight className="w-5 h-5 text-gray-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-1 border-l pl-2 ml-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="p-2 bg-gray-100 rounded-lg transition-all duration-300" title="Calendar View">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CalendarIcon className="w-5 h-5 text-gray-700" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="p-2 hover:bg-gray-100 rounded-lg transition-all duration-300" title="More Options">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <MoreHorizontal className="w-5 h-5 text-gray-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => { setModalSelectedDate(new Date()); setShowTaskModal(true); }} className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all duration-300 text-sm font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Plus className="w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>New Event</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col border border-gray-200 rounded-lg overflow-hidden">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-7 bg-gray-50 border-b border-gray-200">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {weekDays.map((day) => (<div key={day} className="py-3 px-2 text-center text-xs font-semibold text-gray-500 uppercase tracking-wider">{day}</div>))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {calendarDays.map((week, weekIndex) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={weekIndex} className="grid grid-cols-7" style={{ minHeight: '120px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {week.map((day, dayIndex) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const items = getItemsForDate(day.fullDate);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const displayItems = items.slice(0, 1);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const hiddenItemsCount = items.length - displayItems.length;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const today = new Date();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  today.setHours(0,0,0,0);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const isToday = day.fullDate.getTime() === today.getTime();

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={`${weekIndex}-${dayIndex}`} onClick={() => { if (day.isCurrentMonth) setShowTaskModal(true); setModalSelectedDate(day.fullDate) }} className={`border-b border-gray-200 ${dayIndex < 6 ? 'border-r' : ''} p-2 transition-colors duration-200 cursor-pointer relative ${!day.isCurrentMonth ? 'bg-gray-50' : 'bg-white hover:bg-gray-50'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`text-sm font-semibold mb-1 ${isToday ? 'bg-orange-500 text-white rounded-full w-6 h-6 flex items-center justify-center' : (day.isCurrentMonth ? 'text-gray-700' : 'text-gray-400')}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {day.date}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mt-1 space-y-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {displayItems.map((item) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const isOverdue = item.itemType === 'task' && item.due_date && new Date(item.due_date) < today && item.status?.id !== 4;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={`${item.itemType}-${item.id}`} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => handleItemClick(item, e)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`text-xs p-1.5 rounded cursor-pointer transition-all duration-200 flex items-center space-x-1.5 truncate text-white ${item.itemType === 'task' && item.status?.id === 4 ? 'opacity-60 line-through bg-gray-500' : 'bg-gradient-to-r from-blue-500 to-cyan-400'}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.itemType === 'task' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="checkbox" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  checked={item.status?.id === 4}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={() => {}}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => { e.stopPropagation(); handleToggleTaskStatus(item.id); }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-3 h-3 rounded-sm form-checkbox text-blue-300 bg-transparent border-white/50 focus:ring-0 focus:ring-offset-0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="flex-1 truncate font-medium">{item.itemType === 'sprint' ? `SCRUM ${item.name}` : item.title}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isOverdue && <AlertCircle className="w-3 h-3 text-white flex-shrink-0" title="Overdue" />}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  _ Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {hiddenItemsCount > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={(e) => handleMoreClick(items, e)} className="text-xs font-bold text-orange-700 bg-orange-100 rounded-full w-5 h-5 flex items-center justify-center mt-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {hiddenItemsCount}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {popover.type && (
Â  Â  Â  Â  Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ref={popoverRef}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={popover.style}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="fixed z-40 bg-white rounded-lg shadow-2xl border border-gray-200 min-w-[250px]"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {popover.type === 'sprint' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <SprintPopover 
Â  Â  Â  Â  Â  Â  _ Â  Â  Â  Â  Â  Â  Â  sprint={popover.data} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onEdit={() => { setSprintToEdit(popover.data); setPopover({ type: null }); }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onDelete={() => handleDeleteSprint(popover.data.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClose={() => setPopover({ type: null })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {popover.type === 'more' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <MoreItemsPopover 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  items={popover.data}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onItemClick={handleItemClick}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onToggleTask={handleToggleTaskStatus}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â   )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {showTaskModal && (
Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="bg-white rounded-lg shadow-xl w-full max-w-md mx-auto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="p-4 border-b border-gray-200">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <h3 className="text-lg font-semibold text-gray-900">Create New Item</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {modalSelectedDate && selectedTaskType !== 'Epic' && (<p className="text-sm text-gray-500 mt-1">{modalSelectedDate.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <button onClick={() => { setShowTaskModal(false); setTaskInput(''); setSelectedDate(null); setModalSelectedDate(null);}} className="text-gray-400 hover:text-gray-600 p-1 rounded-full">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <X className="w-6 h-6 text-gray-700" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="p-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â placeholder="What needs to be done?"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â value={taskInput}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â onChange={(e) => setTaskInput(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-4 bg-white"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â autoFocus
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedTaskType !== 'Epic' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="date"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={modalSelectedDate ? formatDateForAPI(modalSelectedDate) : ''}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const [year, month, day] = e.target.value.split('-').map(Number);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setModalSelectedDate(new Date(year, month - 1, day));
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => setShowTaskTypeMenu(!showTaskTypeMenu)} className="w-full flex justify-between items-center p-3 border border-gray-300 rounded-lg bg-white">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className='flex items-center gap-2'>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>{taskTypes.find(t => t.name === selectedTaskType)?.icon}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-800">{selectedTaskType}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ChevronDown className="w-4 h-4 text-gray-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {showTaskTypeMenu && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="absolute top-full left-0 mt-1 w-full bg-white border border-gray-200 rounded-lg shadow-lg z-10">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="p-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {taskTypes.map(type => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <button key={type.name} onClick={() => { setSelectedTaskType(type.name); setShowTaskTypeMenu(false); setSelectedParentTaskId(''); }} className="w-full text-left flex items-center gap-2 p-2 hover:bg-gray-50 rounded text-gray-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span>{type.icon}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span>{type.name}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {selectedTaskType === 'Subtask' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="block text-sm font-medium text-gray-700 mb-1">Parent Task</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select value={selectedParentTaskId} onChange={(e) => setSelectedParentTaskId(e.target.value)} className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select a parent...</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {tasks.map(task => (
Â  Â  Â  Â  Â  Â  Â  Â   Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={task.id} value={task.id}>{task.title}</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-4 border-t border-gray-200 flex justify-end">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={handleCreateTask} disabled={!taskInput.trim()} className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-300 font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Create
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â   Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <ItemDetailModal
Â  Â  Â  Â  Â  Â  Â  Â  item={selectedItem}
Â  Â  Â  Â  Â  Â  Â  Â  users={usersWithUnassigned}
Â  Â  Â  Â  Â  Â  Â  Â  sprintName={sprints.find(s => s.id === selectedItem?.sprint)?.name || 'Backlog'}
Â  Â  Â  Â  Â  Â  Â  Â  onClose={() => setSelectedItemId(null)} 
Â  Â  Â  Â  Â  Â  Â  Â  onUpdate={handleUpdateItemDB}
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  onCreateSubtask={handleCreateSubtask} 
Â  Â  Â  Â  Â  Â  Â  Â  Â onFetchComments={handleFetchComments}
Â  Â  onAddComment={handleAddComment}
Â  Â  onUpdateComment={handleUpdateComment}
Â  Â  onDeleteComment={handleDeleteComment}
Â  Â  currentUserId={parseInt(localStorage.getItem("userId"), 10)}
Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  <EditSprintModal
Â  Â  Â  Â  Â  Â  Â  Â  sprint={sprintToEdit}
Â  Â  Â  Â  Â  Â  Â  Â  epics={epics}
Â  Â  Â  Â  Â  Â  Â  Â  onClose={() => setSprintToEdit(null)}
Â  Â  Â  Â  Â  Â  Â  Â  onUpdate={handleUpdateSprint}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>
Â  Â  );
}

// --- Popover components (Neutral styling, no changes needed) ---

const SprintPopover = ({ sprint, onEdit, onDelete, onClose }) => {
Â  Â  const [menuOpen, setMenuOpen] = useState(false);

Â  Â  const getStatus = () => {
Â  Â  Â  Â  if (sprint.is_ended) return { text: 'COMPLETED', color: 'bg-green-100 text-green-800' };
Â  Â  Â  Â  if (sprint.is_active) return { text: 'ACTIVE', color: 'bg-blue-100 text-blue-800' };
Â  Â  Â  Â  return { text: 'FUTURE', color: 'bg-gray-100 text-gray-800' };
Â  Â  };
Â  Â  const status = getStatus();

Â  Â  return (
Â  Â  Â  Â  <div className="p-3 text-sm">
Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center mb-2">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-xs font-semibold text-gray-500">SPRINT</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={`text-xs font-bold px-2 py-0.5 rounded-full ${status.color}`}>{status.text}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className='flex items-center'>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => setMenuOpen(!menuOpen)} className="p-1 rounded-full hover:bg-gray-200"><MoreHorizontal size={16}/></button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {menuOpen && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="absolute right-0 mt-1 w-32 bg-white border rounded shadow-lg z-50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={onEdit} className="block w-full text-left px-3 py-1.5 hover:bg-gray-100 text-sm text-gray-700">Edit sprint</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={onDelete} className="block w-full text-left px-3 py-1.5 hover:bg-gray-100 text-sm text-red-600">Delete sprint</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={onClose} className="p-1 rounded-full hover:bg-gray-200"><X size={16}/></button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <p className="font-bold text-gray-800 mb-3">SCRUM {sprint.name}</p>
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-2 gap-4 text-xs text-gray-600">
Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-semibold mb-1">Start date</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>{new Date(sprint.start_date + 'T00:00:00').toLocaleDateString()}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-semibold mb-1">End date</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>{new Date(sprint.end_date + 'T00:00:00').toLocaleDateString()}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

const MoreItemsPopover = ({ items, onItemClick, onToggleTask }) => {
Â  Â  const today = new Date();
Â  Â  today.setHours(0,0,0,0);

Â  Â  return (
Â  Â  Â  Â  <div className="p-2 max-h-60 overflow-y-auto space-y-1">
Â  Â  Â  Â  Â  Â  Â <h4 className="font-bold text-sm mb-2 px-2 text-gray-800">Items for this day</h4>
Â  Â  Â  Â  Â  Â  {items.map(item => {
Â  Â  Â  Â  Â  Â  Â  Â  const isOverdue = item.itemType === 'task' && item.due_date && new Date(item.due_date) < today && item.status?.id !== 4;
Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={`${item.itemType}-${item.id}`} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => onItemClick(item, e)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`text-xs p-2 rounded cursor-pointer transition-all duration-200 flex items-center space-x-2 truncate hover:brightness-110 ${item.itemType === 'task' && item.status?.id === 4 ? 'opacity-60 line-through bg-gray-500 text-white' : 'bg-gradient-to-r from-blue-500 to-cyan-400 text-white'}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.itemType === 'task' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="checkbox" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  checked={item.status?.id === 4}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={() => {}}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => { e.stopPropagation(); onToggleTask(item.id); }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-3 h-3 rounded-sm form-checkbox text-blue-300 bg-transparent border-white/50 focus:ring-0 focus:ring-offset-0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="flex-1 truncate font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.itemType === 'sprint' ? `SCRUM ${item.name}` : item.title}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isOverdue && <AlertCircle className="w-3 h-3 text-white flex-shrink-0" title="Overdue" />}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  </div>
Â  Â  );
};